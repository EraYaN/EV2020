% x: vector with the original signal:
%   - Default: x = refsignal(32,3,8,2,'92340f0faaaa4321',48000);
%   - Own fast: x = refsignal(32,1,3,9,'e65a20e5',48000);
%   - Own slow: doc
% y: N vectors with output data from microphones
% Fs_RX: 48000 Hz in our case
function t = matched_filter(x, y, Fs_RX)
    
    if length(size(y)) == 3
       y = squeeze(y); % 3D to 2D
    end
    
    t = zeros(size(y,2),1);
    for i = 1:size(y,2)
        [hi,t(i)] = single_matched_filter(x, y(:,i));
        
        t(i) = t(i)/Fs_RX;
        
        subplot(size(y,2),2,i*2-1);
        LinePlotReducer(linspace(0,size(y,1)/Fs_RX,size(y,1)), y(:,i));
        xlabel('Time (s)');
        ylabel('Response');
        hold on;
        plot(t(i), 0, 'r.', 'MarkerSize', 10);
        hold off;
        subplot(size(y,2),2,i*2);
        LinePlotReducer(linspace(0,size(hi,1)/Fs_RX,size(hi,1)), hi);
        xlabel('Time (s)');
        ylabel('Response');
    end
end

function [h, sample] = single_matched_filter(x, y)
   
    h = conv(flipud(x(:)), y);
    h = h((length(x)+1):end);
    
    max = 0;
    max_val = 0;
    for i = 1:length(h)
       if abs(h(i)) > max_val
           max = i;
           max_val = abs(h(i));
       end
    end
    
    sample = max;
end